#!/usr/bin/env fish

function install_brew_packages -a desktop
    log "installing packages"
    if test -n "$desktop"
        env HOMEBREW_DESKTOP=1 brew bundle
    else
        brew bundle
    end
    or return $status
end

function configure_skhd_for_performance
    log "configuring skhd to use bash shell for better performance"

    set plist_path (skhd --install-service 2>&1 | grep -o '/.*\.plist')

    if test -z "$plist_path"
        echo "Could not find the skhd plist path. Is skhd installed?"
        return 1
    end

    if not test -f "$plist_path"
        echo "Plist file does not exist at $plist_path"
        return 1
    end

    # Use bash to modify the plist since it's more reliable for this task
    /bin/bash -c "
        # Check if SHELL is already defined
        if grep -q '<key>SHELL</key>' '$plist_path'; then
            # Update existing SHELL entry
            sed -i '' 's|<string>/bin/.*</string>|<string>/bin/bash</string>|g' '$plist_path'
            echo 'Updated existing SHELL entry in plist'
        else
            # Add SHELL key-value pair after the PATH definition
            if grep -q '<key>EnvironmentVariables</key>' '$plist_path'; then
                sed -i '' '/<key>PATH<\\/key>/,/<\\/string>/ s|</string>|</string>\\n    <key>SHELL</key>\\n    <string>/bin/bash</string>|' '$plist_path'
            else
                # If EnvironmentVariables section doesn't exist, create it before the Program key
                sed -i '' '/<key>Program<\\/key>/ i\\
                <key>EnvironmentVariables</key>\\
                <dict>\\
                  <key>PATH</key>\\
                  <string>/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin</string>\\
                  <key>SHELL</key>\\
                  <string>/bin/bash</string>\\
                </dict>\\
                ' '$plist_path'
            fi
        fi
    "

    echo "Added SHELL=/bin/bash to $plist_path"
end

function terminal -d 'Provision terminal environment'
    log "provisioning terminal utilities for $USER"

    install_brew_packages
    or return $status

    log 'adding brew path to fish'
    fish_add_path /opt/homebrew/bin

    log 'setting m\'s default shell to fish'
    sudo chsh -s /opt/homebrew/bin/fish $USER

    read -P "Would you like to sync desktop configurations? [Y/n] " confirm
    switch $confirm
        case n N
            echo 'skipping desktop sync'
        case '*'
            log 'running sync script for desktop'
            ./sync --desktop
    end

    read -P "Would you like to sync git configurations? [Y/n] " confirm
    switch $confirm
        case n N
            echo 'skipping git sync'
        case '*'
            log 'running sync script for git'
            ./sync --git
    end

    echo 'done provisioning.'
end

function desktop -d 'Provision a macOS desktop environment'
    log "provisioning desktop environment for $USER"

    install_brew_packages --desktop
    or return $status

    test (uname) != Darwin
    and return 1

    read -P "Would you like to delete old login items? [y/N] " confirm
    switch $confirm
        case y Y
            log "deleting old login items"
            osascript -e 'tell application "System Events" to delete every login item'
    end

    log 'adding wezterm to login items'
    osascript -e 'tell application "System Events" to make login item at end with properties {path:"/Applications/WezTerm.app", hidden:false}'

    log 'adding raycast to login items'
    osascript -e 'tell application "System Events" to make login item at end with properties {path:"/Applications/Raycast.app", hidden:false}'

    log 'installing yabai service'
    yabai --install-service
    defaults write com.apple.dock mru-spaces -bool false
    yabai --start-service

    log 'installing skhd service'
    skhd --install-service
    configure_skhd_for_performance
    skhd --stop-service
    skhd --start-service

    log 'installing tmux package manager'
    git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm

    echo "done provisioning."
end

function log -a message
    set_color blue
    echo -n "==> "
    set_color normal
    echo "$message"
end

$argv[1]
